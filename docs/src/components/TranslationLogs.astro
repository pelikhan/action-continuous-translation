---
import { readFileSync, existsSync } from 'fs';
import { join } from 'path';

interface LogEntry {
  filename: string;
  stage: 'translate' | 'validate';
  model: string;
  inputTokens: number;
  outputTokens: number;
  cost: number;
  date: string;
}

let logs: LogEntry[] = [];
let error: string | null = null;

try {
  // Read the log file from the repository root
  // In dev mode, the cwd is the docs directory, in build mode it might be different
  let logPath = join(process.cwd(), '..', 'translations', 'log.json');
  
  // Check if we can access the file from the parent directory
  if (!existsSync(logPath)) {
    // Try from the current directory (for different build contexts)
    logPath = join(process.cwd(), 'translations', 'log.json');
  }
  
  if (!existsSync(logPath)) {
    // Try another common path structure 
    logPath = join(process.cwd(), '..', '..', 'translations', 'log.json');
  }
  
  const logContent = readFileSync(logPath, 'utf-8');
  
  // Parse JSONL format (one JSON object per line)
  logs = logContent
    .split('\n')
    .filter(line => line.trim())
    .map(line => JSON.parse(line));
} catch (e) {
  const cwd = process.cwd();
  error = `Error reading log file. Current working directory: ${cwd}. Error: ${e instanceof Error ? e.message : 'Unknown error'}`;
}

// Calculate aggregate statistics
const totalCost = logs.reduce((sum, log) => sum + log.cost, 0);
const totalInputTokens = logs.reduce((sum, log) => sum + log.inputTokens, 0);
const totalOutputTokens = logs.reduce((sum, log) => sum + log.outputTokens, 0);
const totalTokens = totalInputTokens + totalOutputTokens;
const uniqueFiles = new Set(logs.map(log => log.filename)).size;
const translationEntries = logs.filter(log => log.stage === 'translate').length;
const validationEntries = logs.filter(log => log.stage === 'validate').length;

// Get model usage statistics
const modelStats = logs.reduce((acc, log) => {
  if (!acc[log.model]) {
    acc[log.model] = { count: 0, cost: 0, tokens: 0 };
  }
  acc[log.model].count++;
  acc[log.model].cost += log.cost;
  acc[log.model].tokens += log.inputTokens + log.outputTokens;
  return acc;
}, {} as Record<string, { count: number; cost: number; tokens: number }>);

// Format date for display
const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleString();
};

// Format currency
const formatCurrency = (amount: number) => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 4
  }).format(amount);
};

// Format numbers with commas
const formatNumber = (num: number) => {
  return new Intl.NumberFormat('en-US').format(num);
};
---

<div>
  {error ? (
    <div>
      <h3>Error loading translation logs</h3>
      <p>{error}</p>
      <p>Make sure the <code>translations/log.json</code> file exists in the repository root.</p>
    </div>
  ) : (
    <>
      <h2>Translation Statistics Overview</h2>
      <div>
        <div>
          <h3>Total Cost</h3>
          <p>{formatCurrency(totalCost)}</p>
        </div>
        <div>
          <h3>Total Tokens</h3>
          <p>{formatNumber(totalTokens)}</p>
          <p>
            Input: {formatNumber(totalInputTokens)} | Output: {formatNumber(totalOutputTokens)}
          </p>
        </div>
        <div>
          <h3>Files Processed</h3>
          <p>{uniqueFiles}</p>
        </div>
        <div>
          <h3>Operations</h3>
          <p>{logs.length}</p>
          <p>
            Translations: {translationEntries} | Validations: {validationEntries}
          </p>
        </div>
      </div>

      <h3>Model Usage</h3>
      <div>
        <table>
          <thead>
            <tr>
              <th>Model</th>
              <th>Operations</th>
              <th>Total Cost</th>
              <th>Total Tokens</th>
            </tr>
          </thead>
          <tbody>
            {Object.entries(modelStats).map(([model, stats]) => (
              <tr>
                <td>{model}</td>
                <td>{stats.count}</td>
                <td>{formatCurrency(stats.cost)}</td>
                <td>{formatNumber(stats.tokens)}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <h3>Full Translation Log</h3>
      <div>
        <table>
          <thead>
            <tr>
              <th>Date</th>
              <th>File</th>
              <th>Stage</th>
              <th>Model</th>
              <th>Input Tokens</th>
              <th>Output Tokens</th>
              <th>Cost</th>
            </tr>
          </thead>
          <tbody>
            {logs.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()).map((log) => (
              <tr>
                <td>{formatDate(log.date)}</td>
                <td title={log.filename}>
                  {log.filename.length > 30 ? `...${log.filename.slice(-27)}` : log.filename}
                </td>
                <td>{log.stage}</td>
                <td>{log.model.replace('github:', '')}</td>
                <td>{formatNumber(log.inputTokens)}</td>
                <td>{formatNumber(log.outputTokens)}</td>
                <td>{formatCurrency(log.cost)}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {logs.length === 0 && (
        <p>No translation logs found. Logs will appear here after translation operations are performed.</p>
      )}
    </>
  )}
</div>

