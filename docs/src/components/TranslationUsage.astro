---
import { readFile } from "fs/promises";
import { join } from "path";

interface LogEntry {
  filename: string;
  stage: "translate" | "validate";
  model: string;
  tokens: number;
  prompt?: number;
  completion?: number;
  total?: number;
  cost?: number;
  date: string;
  lang: string;
}

function parse(content: string): LogEntry[] {
  return content
    .split(/\n/g)
    .map((l) => l.trim())
    .filter(Boolean)
    .map((l) => JSON.parse(l)) as LogEntry[];
}

const logPath = join(process.cwd(), "..", "translations", "usage.jsonl");
const logContent = await readFile(logPath, "utf-8");
const logs = parse(logContent);

// Calculate aggregate statistics
const totalCost = logs.reduce((sum, log) => sum + (log.cost ?? 0), 0);
const totalPromptTokens = logs.reduce((sum, log) => sum + (log.prompt ?? 0), 0);
const totalCompletionTokens = logs.reduce(
  (sum, log) => sum + (log.completion ?? 0),
  0
);
const totalTokens = logs.reduce((sum, log) => sum + (log.total ?? 0), 0);
const uniqueFiles = new Set(logs.map((log) => log.filename)).size;
const translationEntries = logs.filter(
  (log) => log.stage === "translate"
).length;
const validationEntries = logs.filter((log) => log.stage === "validate").length;

// Get model usage statistics
const modelStats = logs.reduce(
  (acc, log) => {
    if (!acc[log.model]) {
      acc[log.model] = {
        count: 0,
        cost: 0,
        tokens: 0,
        prompt: 0,
        completion: 0,
      };
    }
    acc[log.model].count++;
    acc[log.model].cost += log.cost ?? 0;
    acc[log.model].tokens += log.total ?? 0;
    acc[log.model].prompt += log.prompt ?? 0;
    acc[log.model].completion += log.completion ?? 0;
    return acc;
  },
  {} as Record<
    string,
    {
      count: number;
      cost: number;
      tokens: number;
      prompt: number;
      completion: number;
    }
  >
);
const localeStats = logs
  .filter(({ lang }) => !!lang)
  .reduce(
    (acc, log) => {
      if (!acc[log.lang]) {
        acc[log.lang] = {
          count: 0,
          cost: 0,
          tokens: 0,
          prompt: 0,
          completion: 0,
        };
      }
      acc[log.lang].count++;
      acc[log.lang].cost += log.cost ?? 0;
      acc[log.lang].tokens += log.total ?? 0;
      acc[log.lang].prompt += log.prompt ?? 0;
      acc[log.lang].completion += log.completion ?? 0;
      return acc;
    },
    {} as Record<
      string,
      {
        count: number;
        cost: number;
        tokens: number;
        prompt: number;
        completion: number;
      }
    >
  );
const fileStats = logs
  .filter(({ filename }) => !!filename)
  .sort((l, r) => l.filename.localeCompare(r.filename))
  .reduce(
    (acc, log) => {
      if (!acc[log.filename]) {
        acc[log.filename] = {
          count: 0,
          cost: 0,
          tokens: 0,
          prompt: 0,
          completion: 0,
        };
      }
      acc[log.filename].count++;
      acc[log.filename].cost += log.cost ?? 0;
      acc[log.filename].tokens += log.total ?? 0;
      acc[log.filename].prompt += log.prompt ?? 0;
      acc[log.filename].completion += log.completion ?? 0;
      return acc;
    },
    {} as Record<
      string,
      {
        count: number;
        cost: number;
        tokens: number;
        prompt: number;
        completion: number;
      }
    >
  );
// Format currency
const formatCurrency = (amount: number | undefined) => {
  return amount === undefined
    ? ""
    : new Intl.NumberFormat("en-US", {
        style: "currency",
        currency: "USD",
        minimumFractionDigits: 4,
      }).format(amount);
};

// Format numbers with commas
const formatNumber = (num: number | undefined) => {
  return num === undefined || isNaN(num)
    ? ""
    : new Intl.NumberFormat("en-US").format(num);
};

const formatTokens = (num: number | undefined) => {
  if (num === undefined || isNaN(num)) return "";
  if (num > 1e6)
    return `${new Intl.NumberFormat("en-US", {
      maximumFractionDigits: 2,
    }).format(num / 1e6)}M`;
  if (num > 1e3)
    return `${new Intl.NumberFormat("en-US", {
      maximumFractionDigits: 1,
    }).format(num / 1e3)}k`;
  return new Intl.NumberFormat("en-US").format(num);
};

const tableStyle = "font-size: 80%;";
---

<h2>Overview</h2>
<div>
  <table>
    <thead>
      <tr>
        <th>Files</th>
        <th>Cost</th>
        <th>Tokens</th>
        <th>Prompt</th>
        <th>Completion</th>
        <th>Translations</th>
        <th>Validations</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>{formatNumber(uniqueFiles)}</td>
        <td>{formatCurrency(totalCost)}</td>
        <td>{formatTokens(totalTokens)}</td>
        <td>{formatTokens(totalPromptTokens)}</td>
        <td>{formatTokens(totalCompletionTokens)}</td>
        <td>{formatNumber(translationEntries)}</td>
        <td>{formatNumber(validationEntries)}</td>
      </tr>
    </tbody>
  </table>
</div>

<h2>Models</h2>
<div>
  <table>
    <thead>
      <tr>
        <th>Model</th>
        <th>Operations</th>
        <th>Cost</th>
        <th>Tokens</th>
        <th>Prompt Tokens</th>
        <th>Completion Tokens</th>
      </tr>
    </thead>
    <tbody>
      {
        Object.entries(modelStats).map(([model, stats]) => (
          <tr>
            <td>{model}</td>
            <td>{formatNumber(stats.count)}</td>
            <td>{formatCurrency(stats.cost)}</td>
            <td>{formatTokens(stats.tokens)}</td>
            <td>{formatTokens(stats.prompt)}</td>
            <td>{formatTokens(stats.completion)}</td>
          </tr>
        ))
      }
    </tbody>
  </table>
</div>

<h2>Locales</h2>
<div>
  <table>
    <thead>
      <tr>
        <th>Locale</th>
        <th>Operations</th>
        <th>Cost</th>
        <th>Tokens</th>
        <th>Prompt Tokens</th>
        <th>Completion Tokens</th>
      </tr>
    </thead>
    <tbody>
      {
        Object.entries(localeStats).map(([locale, stats]) => (
          <tr>
            <td>{locale}</td>
            <td>{formatNumber(stats.count)}</td>
            <td>{formatCurrency(stats.cost)}</td>
            <td>{formatTokens(stats.tokens)}</td>
            <td>{formatTokens(stats.prompt)}</td>
            <td>{formatTokens(stats.completion)}</td>
          </tr>
        ))
      }
    </tbody>
  </table>
</div>

<h2>Locales</h2>
<div style={tableStyle}>
  <table>
    <thead>
      <tr>
        <th>Filename</th>
        <th>Operations</th>
        <th>Cost</th>
        <th>Tokens</th>
        <th>Prompt Tokens</th>
        <th>Completion Tokens</th>
      </tr>
    </thead>
    <tbody>
      {
        Object.entries(fileStats).map(([filename, stats]) => (
          <tr>
            <td>{filename}</td>
            <td>{formatNumber(stats.count)}</td>
            <td>{formatCurrency(stats.cost)}</td>
            <td>{formatTokens(stats.tokens)}</td>
            <td>{formatTokens(stats.prompt)}</td>
            <td>{formatTokens(stats.completion)}</td>
          </tr>
        ))
      }
    </tbody>
  </table>
</div>

<h2>Translation Log</h2>
<div style={tableStyle}>
  <table>
    <thead>
      <tr>
        <th>File</th>
        <th>Stage</th>
        <th>Model</th>
        <th>Locale</th>
        <th>Source Tokens</th>
        <th>Total Tokens</th>
        <th>Prompt Tokens</th>
        <th>Completion Tokens</th>
        <th>Cost</th>
      </tr>
    </thead>
    <tbody>
      {
        logs
          .sort(
            (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()
          )
          .map((log) => (
            <tr>
              <td title={log.filename}>
                {log.filename.length > 23
                  ? `...${log.filename.slice(-20)}`
                  : log.filename}
              </td>
              <td>{log.stage}</td>
              <td>{log.model}</td>
              <td>{log.lang || ""}</td>
              <td>{formatTokens(log.tokens)}</td>
              <td>{formatTokens(log.total)}</td>
              <td>{formatTokens(log.prompt)}</td>
              <td>{formatTokens(log.completion)}</td>
              <td>{formatCurrency(log.cost)}</td>
            </tr>
          ))
      }
    </tbody>
  </table>
</div>

{
  logs.length === 0 && (
    <p>
      No translation logs found. Logs will appear here after translation
      operations are performed.
    </p>
  )
}
